
import React, {useContext, useEffect, useState } from "react";
import useWindowSize from "../src/CustomHooks/UseWindows";
import UserDataContext from "../src/Context/UserDataContext";
import NavLoginButtonContext from "../src/Context/NavLogInButtonContext";
import Router from "next/router";
import axios from "axios";
import Colors from "../src/Constants/Colors";
import { Button } from "@chakra-ui/button";
import { Input } from "@chakra-ui/input";
import { Text } from "@chakra-ui/layout";
import { Heading } from "@chakra-ui/layout";
import { Flex } from "@chakra-ui/layout";
import { useToast } from "@chakra-ui/toast";
import { Stack, Checkbox, Link} from "@chakra-ui/react"
import Head from "next/head";
import Image from "next/image"
import { Spinner } from "@chakra-ui/spinner";

export default function Login() {
  const getWindowSize = useWindowSize();
  const navLoginButtonContext = useContext(NavLoginButtonContext);
  const userDataContext = useContext(UserDataContext);
  const toast = useToast();
  const [accountID, setAccountID] = useState("");
  const [password, setPassword] = useState("");
  const [isVerifyingLogin, setIsVerifyingLogin] = useState(false);

    

    async function verifyLogin() {
        setIsVerifyingLogin(true);
        const jsonData = {
          id: accountID,
          password: password,
        };
        await axios
        .post("https://opdbs.vercel.app/api/checkid/login", jsonData)
        .then((resp) => {
          if (typeof resp.data !== "object" && resp.data !== null) {
            toast({
              title: "Log in failed",
              description: resp.data,
              status: "error",
              duration: 2500,
              isClosable: true,
              position: "bottom-right",
            });
          } else {
            userDataContext.setUserData({
              dataObject: resp.data,
            });
            navLoginButtonContext.handleLoggedInState();
            Router.push("/dashboard");
            toast({
              title: "Log in successful",
              description: "Loading dashboard...",
              status: "success",
              duration: 2500,
              isClosable: true,
              position: "bottom-right",
            });
          }
          return (resp = resp.data);
        })
        .then((resp) => {
          setIsVerifyingLogin(false);
        })
        .catch((error) => {
          console.log(error);
        });
    }

    return (
      <>
        <Head>
        <title>Login</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        </Head>
        <Flex {...styleProps.indexWrapper}>
        <Flex
          w={
            getWindowSize.width < 960
              ? getWindowSize.width * 0.7
              : getWindowSize.width * 0.35
          }
          h={getWindowSize.height < 960
            ? getWindowSize.height * 1
            : getWindowSize.height * 1}
          {...styleProps.formCardContainer}
        >
 
        <Heading color={Colors.white}
        marginTop="100"
        fontSize="55"
        textAlign = "center">TYTO</Heading>
         <Heading color={Colors.white}
        textAlign = "center"
        fontSize="30"
        >Mobile Learning Management System</Heading>
        <Heading color={Colors.white}
        fontSize="30"
        mt="350"
        flexDirection
        textAlign = "left">WELCOME!</Heading>
        <Heading color={Colors.white}
        fontSize="20"
        textAlign = "left">Please login to continue..</Heading>
        <Input
            onChange={(value) => setAccountID(value.target.value)}
            placeholder="Professor ID"
            size="lg"
            mt ="3"
            color={Colors.white}
            autoFocus
          />
        <Input
            onChange={(value) => setPassword(value.target.value)}
            placeholder="Password"
            type="password"
            marginTop="20px"
            size="lg"
            color={Colors.white}
            autoFocus
        />
        <Stack isInline justifyContent= 'space-between'>
        <Checkbox
          fontSize="13"
          color={Colors.white}
          fontWeight="bold"
          cursor="pointer">Remember Me</Checkbox>
        <Link
            fontSize="14"
            color={Colors.white}
            fontWeight="bold"
            cursor="pointer"
        >Forgot Password?</Link>
        </Stack>
            <Button
           backgroundColor={Colors.green}
           color={Colors.white}
           colorScheme="cyan"
           onClick={verifyLogin}
           disabled={isVerifyingLogin}
           mt = "30"
            w={
              getWindowSize.width < 960
              ? getWindowSize.width * 0.5
              : getWindowSize.width * 0.30
            }
            >
              {isVerifyingLogin ? (
                <Spinner
                  thickness="4px"
                  speed="0.65s"
                  emptyColor={Colors.lightGreen}
                  color={Colors.white}
                  size="md"
                />
              ) : (
                "LOGIN"
              )}
            </Button>
        </Flex>
        <Flex
         w={
          getWindowSize.width < 960
            ? getWindowSize.width * 1
            : getWindowSize.width * 1
        }
        h={getWindowSize.height < 960
          ? getWindowSize.height * 1.025
          : getWindowSize.height * 1.02}
        {...styleProps.bannerCardContainer}>
            <Image
          src={"/tyto.png"}
          alt="Picture of the author"
          width={600}
          height={400}
        />
        </Flex>
        </Flex>
      </>
    );   
}
const styleProps = {
  indexWrapper: {
    height: "100vh",
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    bgColor: Colors.white,
  },
  formCardContainer: {
    flexDirection: "column",
    bgColor: Colors.black,
    alignItems: "left",
    marginTop: "10",
    marginBottom: "10",
    borderRadius: "lg",
    shadow: "lg",
    padding: "35",
  },
  bannerCardContainer: {
    flexDirection: "column",
    alignItems: "center",
    bgColor: Colors.grey,
    marginTop: "10",
    marginBottom: "16",
    borderRadius: "lg",
    shadow: "lg",
    padding: "50",
  },
};